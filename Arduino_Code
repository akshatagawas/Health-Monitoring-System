#define USE_ARDUINO_INTERRUPTS true    // Set-up low-level interrupts for most acurate BPM math.
#include <PulseSensorPlayground.h>     // Includes the PulseSensorPlayground Library.   
#include <SoftwareSerial.h>
#include<ArduinoJson.h>
SoftwareSerial s(5,6);


//  Variables
const int PulseWire = 0;       // PulseSensor PURPLE WIRE connected to ANALOG PIN 0
const int TempWire = 1;
int Temp = 0;
const int LED13 = 13;          // The on-board Arduino LED, close to PIN 13.
int Threshold = 550;           // Determine which Signal to "count as a beat" and which to ignore.
String BPM_str;
String Temp_str;                              
                               
PulseSensorPlayground pulseSensor;  // Creates an instance of the PulseSensorPlayground object called "pulseSensor"
//SoftwareSerial espSerial(5, 6);

void setup() {   

  Serial.begin(115200);     // For Serial Monitor
  s.begin(115200);          
  pinMode(TempWire,INPUT);
  delay(2000);

  // Configure the PulseSensor object, by assigning our variables to it. 
  pulseSensor.analogInput(PulseWire);   
  pulseSensor.blinkOnPulse(LED13);       //auto-magically blink Arduino's LED with heartbeat.
  pulseSensor.setThreshold(Threshold);   

  // Double-check the "pulseSensor" object was created and "began" seeing a signal. 
   if (pulseSensor.begin()) {
    Serial.println("We created a pulseSensor Object !");  //This prints one time at Arduino power-up,  or on Arduino reset.  
  }
}



void loop() {

 int myBPM = pulseSensor.getBeatsPerMinute();  // Calls function on our pulseSensor object that returns BPM as an "int".
                                               // "myBPM" hold this BPM value now. 
 Temp = analogRead(Temp);
 delay(1500);
 float mv = (Temp/1024.0)*5000;
 float cel = mv/100;
 float farh = (cel*9)/5+32;
 

  if (pulseSensor.sawStartOfBeat()) {            // Constantly test to see if "a beat happened". 
   Serial.println("â™¥  A HeartBeat Happened ! "); // If test is "true", print a message "a heartbeat happened".
   Serial.print("BPM: ");                        // Print phrase "BPM: " 
   Serial.println(myBPM);                        // Print the value inside of myBPM. 
   Serial.println(cel);
   //BPM_str =String("BPM= ")+String(myBPM);
   //Temp_str = String("Temp= ")+String(cel);
   
//   espSerial.println(myBPM);
//   delay(20);
//   espSerial.println(cel);
//   delay(20);
   StaticJsonBuffer<1000> jsonBuffer;
   JsonObject& root = jsonBuffer.createObject();
   root["BPM"] = myBPM;
   root["temp"] = cel;

   root.printTo(s);
   jsonBuffer.clear();
  
  }

  delay(1000);
}
